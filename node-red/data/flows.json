[
    {
        "id": "10f0e6ed6464fcaa",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a1b2c3d4.56789",
        "type": "tab",
        "label": "Capture loop",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f114013cefb819ab",
        "type": "tab",
        "label": "Convert sql to csv",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dfa80b93e24be3bb",
        "type": "tab",
        "label": "fake_device",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b2b5f587f9451099",
        "type": "tab",
        "label": "Repeat send Temp and Humidity",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7c1d9a9267855d45",
        "type": "tab",
        "label": "Front_end_api",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "56c86bb3d8125fe8",
        "type": "tab",
        "label": "R",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "broker_id",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "emqx",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b7806c5f7af91827",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7d995038ae19c611",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "472ffba8e3af128b",
        "type": "ui_group",
        "name": "Default",
        "tab": "b7806c5f7af91827",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "16e04ea512447595",
        "type": "MySQLdatabase",
        "name": "main",
        "host": "farm_mysql",
        "port": "3306",
        "db": "mydb",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "48caf99ddf286316",
        "type": "MySQLdatabase",
        "name": "",
        "host": "farm_mysql",
        "port": "3306",
        "db": "data_train",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "a1a1a1a1.1111a8",
        "type": "mqtt in",
        "z": "10f0e6ed6464fcaa",
        "name": "Receive Image",
        "topic": "/send/img/+",
        "qos": "0",
        "datatype": "auto",
        "broker": "broker_id",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 460,
        "y": 300,
        "wires": [
            [
                "b2b2b2b2.2222b8"
            ]
        ]
    },
    {
        "id": "b2b2b2b2.2222b8",
        "type": "function",
        "z": "10f0e6ed6464fcaa",
        "name": "Process Image",
        "func": "// Store the image data\nvar deviceId = msg.topic.split('/')[3];\nmsg.payload = {\n    deviceid: deviceId,\n    img: msg.payload.img,\n    timestamp: new Date().toISOString()\n};\n\n// Optionally save to context or global\n// context.set('lastImage_' + deviceId, msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "c3c3c3c3.3333c8",
        "type": "debug",
        "z": "10f0e6ed6464fcaa",
        "name": "Debug Image",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 340,
        "wires": []
    },
    {
        "id": "e5e5e5e5.5555e8",
        "type": "inject",
        "z": "10f0e6ed6464fcaa",
        "name": "Capture Image",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/capture/12",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 240,
        "wires": [
            [
                "f6f6f6f6.6666f8"
            ]
        ]
    },
    {
        "id": "f6f6f6f6.6666f8",
        "type": "mqtt out",
        "z": "10f0e6ed6464fcaa",
        "name": "Publish Capture Command",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 520,
        "y": 240,
        "wires": []
    },
    {
        "id": "8de0968f8fac1a61",
        "type": "mqtt in",
        "z": "10f0e6ed6464fcaa",
        "name": "",
        "topic": "/send/img",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "broker_id",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 420,
        "wires": [
            [
                "6bc06bf999638283",
                "d796d177b4a73839"
            ]
        ]
    },
    {
        "id": "a1",
        "type": "mqtt in",
        "z": "10f0e6ed6464fcaa",
        "name": "",
        "topic": "/send/img/chunk",
        "qos": "0",
        "datatype": "auto",
        "broker": "broker_id",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 400,
        "y": 560,
        "wires": [
            [
                "a2"
            ]
        ]
    },
    {
        "id": "a2",
        "type": "function",
        "z": "10f0e6ed6464fcaa",
        "name": "Reassemble Chunks",
        "func": "// Initialize buffer if first chunk\nif(!context.buffer) context.buffer = {};\n\n// Store chunk\nconst chunk = msg.payload;\nif(!context.buffer[chunk.id]) {\n    context.buffer[chunk.id] = {\n        parts: [],\n        expected: 0,\n        received: 0\n    };\n}\n\ncontext.buffer[chunk.id].parts[chunk.seq] = chunk.data;\ncontext.buffer[chunk.id].received++;\n\n// Check if all chunks received\nif(context.buffer[chunk.id].received === context.buffer[chunk.id].expected) {\n    // Combine and output\n    const fullImage = \"data:image/jpeg;base64,\" + \n        context.buffer[chunk.id].parts.join('');\n    \n    delete context.buffer[chunk.id];\n    \n    return {\n        payload: {\n            deviceid: chunk.id,\n            img: fullImage\n        }\n    };\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "6bc06bf999638283",
        "type": "ui_template",
        "z": "10f0e6ed6464fcaa",
        "group": "472ffba8e3af128b",
        "name": "",
        "order": 1,
        "width": 6,
        "height": 7,
        "format": "<div style=\"text-align:center;\">\n    <img src=\"data:image/png;base64,{{msg.payload.img}}\" style=\"max-width:100%;\"/>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 520,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "d796d177b4a73839",
        "type": "ui_text",
        "z": "10f0e6ed6464fcaa",
        "group": "472ffba8e3af128b",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "text",
        "format": "{{msg.payload.img}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 470,
        "y": 480,
        "wires": []
    },
    {
        "id": "process-results",
        "type": "function",
        "z": "10f0e6ed6464fcaa",
        "name": "Process Results",
        "func": "// Process each row from SQL results\nconst results = msg.payload;\nconst messages = [];\n\nresults.forEach(row => {\n    // Create a new message for each row\n    const newMsg = {\n        topic: `/capture/${row.device_id}`,  // Dynamic topic\n        payload: row.value           // Payload from SQL\n    };\n    messages.push(newMsg);\n});\n\n// Return array of messages\n\nmsg.payload = messages;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 660,
        "wires": [
            [
                "send-mqtt"
            ]
        ]
    },
    {
        "id": "send-mqtt",
        "type": "function",
        "z": "10f0e6ed6464fcaa",
        "name": "Send MQTT Messages",
        "func": "// For each message in the array, send to MQTT\nconst messages = msg.payload;\n\nmessages.forEach(mqttMsg => {\n    node.send({\n        topic: mqttMsg.topic,\n        payload: mqttMsg.payload\n    });\n});\n\n// Don't pass through original message\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 660,
        "wires": [
            [
                "a39d7b4a3bf01c1a"
            ]
        ]
    },
    {
        "id": "a39d7b4a3bf01c1a",
        "type": "mqtt out",
        "z": "10f0e6ed6464fcaa",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 1030,
        "y": 640,
        "wires": []
    },
    {
        "id": "fe29c6fa477b9357",
        "type": "mysql",
        "z": "10f0e6ed6464fcaa",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 510,
        "y": 780,
        "wires": [
            [
                "process-results"
            ]
        ]
    },
    {
        "id": "228ba6c59eb0e92f",
        "type": "ui_button",
        "z": "10f0e6ed6464fcaa",
        "name": "",
        "group": "472ffba8e3af128b",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "clear",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 270,
        "y": 500,
        "wires": [
            [
                "6bc06bf999638283"
            ]
        ]
    },
    {
        "id": "inject1",
        "type": "inject",
        "z": "a1b2c3d4.56789",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "function1"
            ]
        ]
    },
    {
        "id": "function1",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Initialize Counter",
        "func": "// Initialize counter and device ID\nmsg.counter = 0;\nmsg.maxCount = 5;\nmsg.deviceId = \"your_device_id_here\"; // Replace with actual device ID or get it dynamically\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "mqtt-out"
            ]
        ]
    },
    {
        "id": "mqtt-out",
        "type": "mqtt out",
        "z": "a1b2c3d4.56789",
        "name": "Send Capture Command",
        "topic": "/capture/{{deviceId}}",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 570,
        "y": 100,
        "wires": []
    },
    {
        "id": "mqtt-in",
        "type": "mqtt in",
        "z": "a1b2c3d4.56789",
        "name": "Listen for Image",
        "topic": "/send/img",
        "qos": "0",
        "datatype": "auto",
        "broker": "broker_id",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 180,
        "wires": [
            [
                "function2"
            ]
        ]
    },
    {
        "id": "function2",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Check Counter",
        "func": "// Increment counter\nmsg.counter = msg.counter || 0;\nmsg.counter++;\n\n// If we've reached max count, stop\nif (msg.counter >= msg.maxCount) {\n    node.status({fill:\"green\",shape:\"dot\",text:\"Completed \"+msg.counter+\" captures\"});\n    return null;\n}\n\n// Otherwise prepare for next capture\nmsg.topic = \"/capture/\" + (msg.deviceId || \"your_device_id_here\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "delay1"
            ]
        ]
    },
    {
        "id": "delay1",
        "type": "delay",
        "z": "a1b2c3d4.56789",
        "name": "Short Delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 570,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "initDevices",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Initialize Device Loop",
        "func": "if (!msg.payload || msg.payload.length === 0) {\n    node.error(\"No active devices\", msg);\n    return null;\n}\nflow.set(\"devices\", msg.payload);\nflow.set(\"currentIndex\", 0);\nflow.set(\"loopCount\", 0);\nreturn { ...msg, deviceId: msg.payload[0].device_id };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "deviceLoop",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Device/Loop Counter",
        "func": "const devices = flow.get(\"devices\");\nlet index = flow.get(\"currentIndex\");\nlet loopCount = flow.get(\"loopCount\");\n\nif (index >= devices.length) {\n    flow.set(\"devices\", null);\n    return null;  // All devices done\n}\n\nmsg.deviceId = devices[index].device_id;\n\nif (loopCount < 5) {\n    flow.set(\"loopCount\", loopCount + 1);\n    return msg;  // Continue loop\n} else {\n    flow.set(\"currentIndex\", index + 1);\n    flow.set(\"loopCount\", 0);\n    if (index + 1 < devices.length) {\n        msg.deviceId = devices[index + 1].device_id;\n        return msg;  // Next device\n    } else {\n        return null;  // Done\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "161ce90f14e25bcd",
        "type": "mysql",
        "z": "a1b2c3d4.56789",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 450,
        "y": 420,
        "wires": [
            [
                "0cb059daa7bb84fe",
                "8e9b9b654593d683"
            ]
        ]
    },
    {
        "id": "22408030e56b3eaa",
        "type": "change",
        "z": "a1b2c3d4.56789",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "40 4",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT `device_id` FROM `device` WHERE `status` = \"active\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 420,
        "wires": [
            [
                "161ce90f14e25bcd"
            ]
        ]
    },
    {
        "id": "eef583b40691e192",
        "type": "inject",
        "z": "a1b2c3d4.56789",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "22408030e56b3eaa"
            ]
        ]
    },
    {
        "id": "64d66c313fd3cba9",
        "type": "debug",
        "z": "a1b2c3d4.56789",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 420,
        "wires": []
    },
    {
        "id": "adf5f5ac53a4e845",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "function 1",
        "func": "var mss = msg.payload\nvar result = [];\nvar result2 = []\n\nmss.forEach(function(element) {\n    var tmp = { device_id: element.device_id, couter: 0, couter2: 0 };\n    var tmp2 = {device_id: element.device_id , index : 1}\n    result.push(tmp);\n    result2.push(tmp2)\n});\n\nresult.push({ device_id: 12, couter: 0, couter2: 0 });\n\nflow.set(\"coutinglp\",result);\nflow.set(\"index_pot\",result2);\nmsg.payload = result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 420,
        "wires": [
            [
                "6fb0c122f0ab5ad3",
                "f9276427c71725d4"
            ]
        ]
    },
    {
        "id": "6fb0c122f0ab5ad3",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "function 2",
        "func": "msg.payload = flow.get(\"coutinglp\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 420,
        "wires": [
            [
                "64d66c313fd3cba9"
            ]
        ]
    },
    {
        "id": "f9276427c71725d4",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Process Results",
        "func": "// Process each row from SQL results\nconst results = msg.payload;\nconst messages = [];\n\nresults.forEach(row => {\n    // Create a new message for each row\n    const newMsg = {\n        topic: `/capture/${row.device_id}`,  // Dynamic topic\n        payload: row.value           // Payload from SQL\n    };\n    messages.push(newMsg);\n});\n\n// Return array of messages\n\nmsg.payload = messages;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 460,
        "wires": [
            [
                "8c69be63c5c46f61"
            ]
        ]
    },
    {
        "id": "8c69be63c5c46f61",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Send MQTT Messages",
        "func": "// For each message in the array, send to MQTT\nconst messages = msg.payload;\n\nmessages.forEach(mqttMsg => {\n    node.send({\n        topic: mqttMsg.topic,\n        payload: mqttMsg.payload\n    });\n});\n\n// Don't pass through original message\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 460,
        "wires": [
            [
                "4cf23024e22db4f5"
            ]
        ]
    },
    {
        "id": "4cf23024e22db4f5",
        "type": "mqtt out",
        "z": "a1b2c3d4.56789",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 1350,
        "y": 460,
        "wires": []
    },
    {
        "id": "71d77c4a460734b8",
        "type": "cron",
        "z": "a1b2c3d4.56789",
        "name": "",
        "cronExpression": "0 0 * * *",
        "fireAtStartup": false,
        "x": 130,
        "y": 360,
        "wires": [
            [
                "22408030e56b3eaa",
                "e71131dbbc6f39b6",
                "c92497c31f2b80b1"
            ]
        ]
    },
    {
        "id": "e71131dbbc6f39b6",
        "type": "change",
        "z": "a1b2c3d4.56789",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "time",
                "pt": "flow",
                "to": "day",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "c27e59f897079d77",
        "type": "cron",
        "z": "a1b2c3d4.56789",
        "name": "",
        "cronExpression": "0 10 * * *",
        "fireAtStartup": false,
        "x": 130,
        "y": 500,
        "wires": [
            [
                "6d2e68a3322846b4",
                "22408030e56b3eaa"
            ]
        ]
    },
    {
        "id": "6d2e68a3322846b4",
        "type": "change",
        "z": "a1b2c3d4.56789",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "time",
                "pt": "flow",
                "to": "even",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "56edc50af0d9f1a9",
        "type": "mqtt in",
        "z": "a1b2c3d4.56789",
        "name": "",
        "topic": "/send/img",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "broker_id",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 720,
        "wires": [
            [
                "eda7140b75f03bbd"
            ]
        ]
    },
    {
        "id": "bc5fec4aecadfc69",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "function 3",
        "func": "var device_id = msg.payload.device_id;\nmsg.topic = \"/forward/\"+ device_id;\nmsg.payload = \"\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 840,
        "wires": [
            [
                "94b4dadfdaed31cb",
                "2813ac1f26adfecb"
            ]
        ]
    },
    {
        "id": "33df443a51a3a695",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "update_img_train",
        "func": "\n\n\nvar sql = \"INSERT INTO `imagetable`(`img`, `device_id`) VALUES ('\" + msg.payload.img + \"','\" + msg.payload.deviceid + \"'); SELECT `device_id` FROM `imagetable` WHERE `device_id` = \" + msg.payload.deviceid  ;\nmsg.topic = sql; \nmsg.payload = '';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 720,
        "wires": [
            [
                "2d136bb77bd4f9e6"
            ]
        ]
    },
    {
        "id": "2d136bb77bd4f9e6",
        "type": "mysql",
        "z": "a1b2c3d4.56789",
        "mydb": "48caf99ddf286316",
        "name": "",
        "x": 800,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "eda7140b75f03bbd",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "function 4",
        "func": "var flow_data = flow.get(\"coutinglp\")\nvar device_id = msg.payload.deviceid;\n\nflow_data.forEach(function(element) {\n    if(element.device_id == device_id){\n\n        if (element.couter == 8 || element.couter >= 99) {\n            element.couter == 99;\n            msg.payload = \"drop\";\n        }else if(element.couter %2 == 0 && element.couter != 99){\n            element.couter ++ ;\n            msg.payload = \"drop\";\n        }\n        \n        else{\n            element.couter ++;\n        }\n    }\n});\nflow.set(\"coutinglp\",flow_data);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 720,
        "wires": [
            [
                "71eeb2089d921390"
            ]
        ]
    },
    {
        "id": "71eeb2089d921390",
        "type": "switch",
        "z": "a1b2c3d4.56789",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "drop",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "drop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 720,
        "wires": [
            [],
            [
                "33df443a51a3a695",
                "65ee97a543ef86d1"
            ]
        ]
    },
    {
        "id": "94b4dadfdaed31cb",
        "type": "mqtt out",
        "z": "a1b2c3d4.56789",
        "name": "move",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 1370,
        "y": 840,
        "wires": []
    },
    {
        "id": "863a6d5e5567644b",
        "type": "mqtt in",
        "z": "a1b2c3d4.56789",
        "name": "",
        "topic": "/finishmove/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "broker_id",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 880,
        "wires": [
            [
                "ccd083cce4c6c32d"
            ]
        ]
    },
    {
        "id": "ccd083cce4c6c32d",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "function 5",
        "func": "var flow_data = flow.get(\"coutinglp\")\nvar tmp = msg.topic.split(\"/\");\nvar device_id = tmp[2];\n\nflow_data.forEach(function(element) {\n    if(element.device_id == device_id){\n\n        if (element.couter2 == 6 || element.couter2 >= 99) {\n            element.couter2 == 99;\n            msg.payload = \"drop\";\n        }else if(element.couter2 %2 == 0 && element.couter2 != 99){\n            element.couter2 ++ ;\n            msg.payload = \"drop\";\n        }else{\n            element.couter2 ++;\n        }\n    }\n});\nflow.set(\"coutinglp\",flow_data);\nmsg.deviceid = device_id;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 880,
        "wires": [
            [
                "c550072b85cd9687"
            ]
        ]
    },
    {
        "id": "c550072b85cd9687",
        "type": "switch",
        "z": "a1b2c3d4.56789",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "drop",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "drop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 880,
        "wires": [
            [],
            [
                "473201a68015f6fc"
            ]
        ]
    },
    {
        "id": "6b5cf3412bb77b64",
        "type": "inject",
        "z": "a1b2c3d4.56789",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/finishmove/12",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "b7e2046971a757fc"
            ]
        ]
    },
    {
        "id": "b7e2046971a757fc",
        "type": "mqtt out",
        "z": "a1b2c3d4.56789",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 430,
        "y": 1000,
        "wires": []
    },
    {
        "id": "de94d7c933399ffb",
        "type": "mqtt in",
        "z": "a1b2c3d4.56789",
        "d": true,
        "name": "",
        "topic": "/forward/12",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "broker_id",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 1280,
        "wires": [
            [
                "67177ad258ba535b"
            ]
        ]
    },
    {
        "id": "67177ad258ba535b",
        "type": "delay",
        "z": "a1b2c3d4.56789",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 1280,
        "wires": [
            [
                "3e9343a6dc920131"
            ]
        ]
    },
    {
        "id": "3e9343a6dc920131",
        "type": "mqtt out",
        "z": "a1b2c3d4.56789",
        "d": true,
        "name": "",
        "topic": "/finishmove/12",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 600,
        "y": 1280,
        "wires": []
    },
    {
        "id": "473201a68015f6fc",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "function 6",
        "func": "msg.topic = \"/capture/\" + msg.deviceid;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 880,
        "wires": [
            [
                "03c117eae7a87f6a"
            ]
        ]
    },
    {
        "id": "03c117eae7a87f6a",
        "type": "mqtt out",
        "z": "a1b2c3d4.56789",
        "name": "repeat img",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 790,
        "y": 880,
        "wires": []
    },
    {
        "id": "214d68519b0d7bad",
        "type": "inject",
        "z": "a1b2c3d4.56789",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "015e8d0ae0886c2a"
            ]
        ]
    },
    {
        "id": "015e8d0ae0886c2a",
        "type": "mqtt out",
        "z": "a1b2c3d4.56789",
        "name": "",
        "topic": "/back/1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 380,
        "y": 240,
        "wires": []
    },
    {
        "id": "a7fcded09e3f67c6",
        "type": "mqtt in",
        "z": "a1b2c3d4.56789",
        "name": "",
        "topic": "/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "broker_id",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1030,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "6b35009ad6a0d509",
        "type": "change",
        "z": "a1b2c3d4.56789",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "x",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 840,
        "wires": [
            [
                "6935bac42cfafe97"
            ]
        ]
    },
    {
        "id": "af7e2b7d41f296e6",
        "type": "ui_button",
        "z": "a1b2c3d4.56789",
        "name": "",
        "group": "472ffba8e3af128b",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "start",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "22408030e56b3eaa"
            ]
        ]
    },
    {
        "id": "a103afbde24020fb",
        "type": "ui_button",
        "z": "a1b2c3d4.56789",
        "name": "",
        "group": "472ffba8e3af128b",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "3",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "015e8d0ae0886c2a"
            ]
        ]
    },
    {
        "id": "c5aaaf1495c8762f",
        "type": "ui_button",
        "z": "a1b2c3d4.56789",
        "name": "",
        "group": "472ffba8e3af128b",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "cap",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "x",
        "topicType": "msg",
        "x": 230,
        "y": 1160,
        "wires": [
            [
                "224a1e1eee5afcca"
            ]
        ]
    },
    {
        "id": "0cb059daa7bb84fe",
        "type": "mqtt out",
        "z": "a1b2c3d4.56789",
        "name": "",
        "topic": "/initcam/12",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 610,
        "y": 500,
        "wires": []
    },
    {
        "id": "8e9b9b654593d683",
        "type": "delay",
        "z": "a1b2c3d4.56789",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 420,
        "wires": [
            [
                "adf5f5ac53a4e845"
            ]
        ]
    },
    {
        "id": "4802b005174604ef",
        "type": "debug",
        "z": "a1b2c3d4.56789",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 100,
        "wires": []
    },
    {
        "id": "d99def6d523c2427",
        "type": "inject",
        "z": "a1b2c3d4.56789",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "224a1e1eee5afcca",
        "type": "mqtt out",
        "z": "a1b2c3d4.56789",
        "name": "",
        "topic": "/capture/12",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 490,
        "y": 1160,
        "wires": []
    },
    {
        "id": "65ee97a543ef86d1",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "update_img_front",
        "func": "// For CultivationPot\n\nvar ref = flow.get(\"index_pot\");\nvar img = msg.payload.img;\nvar device_id = msg.payload.deviceid;\nvar index_p = 0;\n\nref.forEach(function(element) {\n    if (element.device_id = device_id){\n        index_p = element.index;\n        element.index ++;\n    }\n});\n\n\n\nvar sql = `\nUPDATE cultivationpot SET cultivationpot.img_path = \"data:image/jpeg;base64,${img}\" WHERE cultivationpot.device_id = ${device_id} AND cultivationpot.index = ${index_p};\nUPDATE growingpot SET growingpot.img_path = \"data:image/jpeg;base64,${img}\" WHERE growingpot.device_id = ${device_id} AND growingpot.index = ${index_p};\n`;\n\n\n\nflow.set(\"index_pot\",ref)\nmsg.topic = sql;\nmsg.payload = {\n    device_id : device_id,\n    index_p : index_p\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 780,
        "wires": [
            [
                "7460de403e5d2bd1",
                "6b35009ad6a0d509"
            ]
        ]
    },
    {
        "id": "7460de403e5d2bd1",
        "type": "mysql",
        "z": "a1b2c3d4.56789",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 870,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "2813ac1f26adfecb",
        "type": "debug",
        "z": "a1b2c3d4.56789",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 880,
        "wires": []
    },
    {
        "id": "c92497c31f2b80b1",
        "type": "change",
        "z": "a1b2c3d4.56789",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "UPDATE cultivationpot SET cultivationpot.age = cultivationpot.age + 1 WHERE 1;  UPDATE growingpot SET growingpot.age = growingpot.age + 1 WHERE 1;",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 320,
        "wires": [
            [
                "94adcc8719681786"
            ]
        ]
    },
    {
        "id": "94adcc8719681786",
        "type": "mysql",
        "z": "a1b2c3d4.56789",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 590,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9041e1b97bcbcb5e",
        "type": "inject",
        "z": "a1b2c3d4.56789",
        "name": "Test update age",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "c92497c31f2b80b1"
            ]
        ]
    },
    {
        "id": "6935bac42cfafe97",
        "type": "switch",
        "z": "a1b2c3d4.56789",
        "name": "",
        "property": "payload.index_p",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "gte",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 840,
        "wires": [
            [
                "bc5fec4aecadfc69"
            ],
            []
        ]
    },
    {
        "id": "7ab3f17725debd07",
        "type": "cron",
        "z": "a1b2c3d4.56789",
        "name": "",
        "cronExpression": "45 0 * * *",
        "fireAtStartup": false,
        "x": 130,
        "y": 560,
        "wires": [
            [
                "7f8b0a67495e0f8b"
            ]
        ]
    },
    {
        "id": "fe3866b62cb9496d",
        "type": "cron",
        "z": "a1b2c3d4.56789",
        "name": "",
        "cronExpression": "45 10 * * *",
        "fireAtStartup": false,
        "x": 140,
        "y": 620,
        "wires": [
            [
                "7f8b0a67495e0f8b"
            ]
        ]
    },
    {
        "id": "7f8b0a67495e0f8b",
        "type": "change",
        "z": "a1b2c3d4.56789",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "40 4",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT `device_id` FROM `device` WHERE `status` = \"active\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 600,
        "wires": [
            [
                "f7c1f4b8283fa91d"
            ]
        ]
    },
    {
        "id": "23d8959b4c603a12",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Setting mqtt",
        "func": "var result = msg.payload\n\nresult.forEach(function(element) {\n    node.send({\n        topic: \"/back/\" + element.device_id,\n        payload : 3\n    });\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 600,
        "wires": [
            [
                "ae1e56353b6e0c94"
            ]
        ]
    },
    {
        "id": "f7c1f4b8283fa91d",
        "type": "mysql",
        "z": "a1b2c3d4.56789",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 590,
        "y": 600,
        "wires": [
            [
                "23d8959b4c603a12"
            ]
        ]
    },
    {
        "id": "ae1e56353b6e0c94",
        "type": "mqtt out",
        "z": "a1b2c3d4.56789",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 1110,
        "y": 600,
        "wires": []
    },
    {
        "id": "bf6ae2d78b758e51",
        "type": "inject",
        "z": "a1b2c3d4.56789",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 680,
        "wires": [
            [
                "7f8b0a67495e0f8b"
            ]
        ]
    },
    {
        "id": "process-data-node",
        "type": "function",
        "z": "f114013cefb819ab",
        "name": "Prepare data",
        "func": "// Process SQL data for CSV conversion\nmsg.payload = msg.payload.map(row => {\n    return {\n        date: row.day, // adjust to your date column name\n        img: row.img,\n        label : row.label\n    };\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 320,
        "wires": [
            [
                "csv-converter"
            ]
        ]
    },
    {
        "id": "csv-converter",
        "type": "csv",
        "z": "f114013cefb819ab",
        "name": "Convert to CSV",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 660,
        "y": 320,
        "wires": [
            [
                "output-node",
                "3539c3762218949d"
            ]
        ]
    },
    {
        "id": "output-node",
        "type": "file",
        "z": "f114013cefb819ab",
        "name": "Save CSV",
        "filename": "image_data.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "x": 890,
        "y": 320,
        "wires": [
            [
                "28ec9e147db409dc",
                "f22ee9797856848d"
            ]
        ]
    },
    {
        "id": "inject-node",
        "type": "inject",
        "z": "f114013cefb819ab",
        "name": "Trigger",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT `img` , `day`,`label` FROM `imagetable` WHERE id >= 435",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "fa86fe2394c2d297"
            ]
        ]
    },
    {
        "id": "fa86fe2394c2d297",
        "type": "mysql",
        "z": "f114013cefb819ab",
        "mydb": "48caf99ddf286316",
        "name": "",
        "x": 280,
        "y": 260,
        "wires": [
            [
                "process-data-node"
            ]
        ]
    },
    {
        "id": "28ec9e147db409dc",
        "type": "http response",
        "z": "f114013cefb819ab",
        "name": "Send CSV",
        "statusCode": "",
        "headers": {
            "content-type": "text/csv",
            "content-disposition": "attachment; filename=\"image_data.csv\""
        },
        "x": 1090,
        "y": 320,
        "wires": []
    },
    {
        "id": "3539c3762218949d",
        "type": "file",
        "z": "f114013cefb819ab",
        "name": "Save CSV",
        "filename": "C:/Users/gupgh/Downloads/imagetable_data.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 910,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "d0cee41e6a7ea6eb",
        "type": "http in",
        "z": "f114013cefb819ab",
        "name": "Static Files",
        "url": "/data/*",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "f22ee9797856848d",
                "dc9d925bc11cc212"
            ]
        ]
    },
    {
        "id": "f22ee9797856848d",
        "type": "http response",
        "z": "f114013cefb819ab",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 420,
        "wires": []
    },
    {
        "id": "781f304379c33e0e",
        "type": "debug",
        "z": "f114013cefb819ab",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 140,
        "wires": []
    },
    {
        "id": "dc9d925bc11cc212",
        "type": "change",
        "z": "f114013cefb819ab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT `img` , `day`,`label` FROM `imagetable` WHERE id >= 345",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 360,
        "wires": [
            [
                "fa86fe2394c2d297"
            ]
        ]
    },
    {
        "id": "9aa5bcc93a228c4e",
        "type": "file",
        "z": "f114013cefb819ab",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1040,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "5ea043fde4e0f132",
        "type": "inject",
        "z": "dfa80b93e24be3bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/finishmove/12",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 140,
        "wires": [
            [
                "bcf8be85037e164f"
            ]
        ]
    },
    {
        "id": "bcf8be85037e164f",
        "type": "mqtt out",
        "z": "dfa80b93e24be3bb",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 490,
        "y": 140,
        "wires": []
    },
    {
        "id": "54c9ba2d239e7bc4",
        "type": "mqtt in",
        "z": "dfa80b93e24be3bb",
        "d": true,
        "name": "",
        "topic": "/forward/12",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "broker_id",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 720,
        "y": 180,
        "wires": [
            [
                "5cc9973ab3af4369"
            ]
        ]
    },
    {
        "id": "5cc9973ab3af4369",
        "type": "delay",
        "z": "dfa80b93e24be3bb",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 180,
        "wires": [
            [
                "6804e8e41d173ba7"
            ]
        ]
    },
    {
        "id": "6804e8e41d173ba7",
        "type": "mqtt out",
        "z": "dfa80b93e24be3bb",
        "d": true,
        "name": "",
        "topic": "/finishmove/12",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 1080,
        "y": 180,
        "wires": []
    },
    {
        "id": "352010933e919ed1",
        "type": "debug",
        "z": "dfa80b93e24be3bb",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 120,
        "wires": []
    },
    {
        "id": "ce7dbbd63b2cc0bb",
        "type": "mqtt out",
        "z": "dfa80b93e24be3bb",
        "name": "",
        "topic": "/update_env/1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 520,
        "y": 220,
        "wires": []
    },
    {
        "id": "4767925d13c75d01",
        "type": "inject",
        "z": "dfa80b93e24be3bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "34:14",
        "payloadType": "str",
        "x": 190,
        "y": 220,
        "wires": [
            [
                "ce7dbbd63b2cc0bb"
            ]
        ]
    },
    {
        "id": "77cb316de1659eba",
        "type": "inject",
        "z": "dfa80b93e24be3bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/send/img",
        "payload": "{\"deviceid\":1,\"img\":\"\"}",
        "payloadType": "json",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "e1e6d03873218559"
            ]
        ]
    },
    {
        "id": "e1e6d03873218559",
        "type": "mqtt out",
        "z": "dfa80b93e24be3bb",
        "name": "",
        "topic": "/send/img",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 500,
        "y": 300,
        "wires": []
    },
    {
        "id": "c9dba18a8354f73b",
        "type": "inject",
        "z": "b2b5f587f9451099",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "SELECT `device_id` FROM `device` WHERE `status` = \"active\"",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 160,
        "wires": [
            [
                "6d6fb5a7add957ce"
            ]
        ]
    },
    {
        "id": "c2d2e09455d33f3a",
        "type": "function",
        "z": "b2b5f587f9451099",
        "name": "Setting mqtt",
        "func": "var result = msg.payload\n\nresult.forEach(function(element) {\n    node.send({\n        topic: \"/get_env/\" + element.device_id,\n        payload : \"\"\n    });\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [
            [
                "577f42dff5d440f0"
            ]
        ]
    },
    {
        "id": "6d6fb5a7add957ce",
        "type": "mysql",
        "z": "b2b5f587f9451099",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "c2d2e09455d33f3a"
            ]
        ]
    },
    {
        "id": "577f42dff5d440f0",
        "type": "mqtt out",
        "z": "b2b5f587f9451099",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "broker_id",
        "x": 810,
        "y": 160,
        "wires": []
    },
    {
        "id": "e767788289a79f16",
        "type": "inject",
        "z": "b2b5f587f9451099",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "UPDATE farm f JOIN device d ON f.farm_id = d.farm_id SET f.temperature = 25,     f.humidity = 60 WHERE d.device_id = '1'",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "6e188ff0b4021053"
            ]
        ]
    },
    {
        "id": "6e188ff0b4021053",
        "type": "mysql",
        "z": "b2b5f587f9451099",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 550,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "cef93177e56dedf5",
        "type": "mqtt in",
        "z": "b2b5f587f9451099",
        "name": "",
        "topic": "/update_env/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "broker_id",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 280,
        "wires": [
            [
                "30043f21a995b066"
            ]
        ]
    },
    {
        "id": "30043f21a995b066",
        "type": "function",
        "z": "b2b5f587f9451099",
        "name": "function 7",
        "func": "var mss = String(msg.payload);\nmss = mss.split(':');\nvar temp = mss[0]\nvar humid = mss[1]\nvar deviceid = msg.topic.split(\"/\")\ndeviceid = deviceid[2]\n\nvar sql = \"UPDATE farm JOIN device ON farm.farm_id = device.farm_id SET farm.temperature = \"+temp+\" , farm.humidity = \"+humid+\" WHERE device.device_id = \"+deviceid;\nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 280,
        "wires": [
            [
                "6e188ff0b4021053"
            ]
        ]
    },
    {
        "id": "7cdc7affc746d064",
        "type": "inject",
        "z": "b2b5f587f9451099",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "d01055f0a2dfb9bf"
            ]
        ]
    },
    {
        "id": "d01055f0a2dfb9bf",
        "type": "debug",
        "z": "b2b5f587f9451099",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 400,
        "wires": []
    },
    {
        "id": "69ccfd74913df3a6",
        "type": "cron",
        "z": "b2b5f587f9451099",
        "name": "",
        "cronExpression": "0 1 * * *",
        "fireAtStartup": false,
        "x": 110,
        "y": 480,
        "wires": [
            [
                "ab6e5d28b78d8b40"
            ]
        ]
    },
    {
        "id": "ab6e5d28b78d8b40",
        "type": "function",
        "z": "b2b5f587f9451099",
        "name": "function 11",
        "func": "msg.topic = `\nSET @today = CURRENT_DATE();\nSET @exists = (SELECT COUNT(*) FROM log_table WHERE date_log = @today);\n\nUPDATE log_table \nSET \n    normal_pot = (SELECT COUNT(*) FROM cultivationpot WHERE cultivationpot.status = 'safe') + \n                 (SELECT COUNT(*) FROM growingpot WHERE growingpot.status = 'safe'),\n    unnormal_pot = (SELECT COUNT(*) FROM cultivationpot WHERE cultivationpot.status = 'danger') + \n                   (SELECT COUNT(*) FROM growingpot WHERE growingpot.status = 'danger')\nWHERE date_log = @today AND @exists > 0;\n\nINSERT INTO log_table (date_log, normal_pot, unnormal_pot)\nSELECT \n    @today,\n    (SELECT COUNT(*) FROM cultivationpot WHERE cultivationpot.status = 'safe') + \n    (SELECT COUNT(*) FROM growingpot WHERE growingpot.status = 'safe'),\n    (SELECT COUNT(*) FROM cultivationpot WHERE cultivationpot.status = 'danger') + \n    (SELECT COUNT(*) FROM growingpot WHERE growingpot.status = 'danger')\nWHERE @exists = 0;\n\nSELECT \n    log_table.log_id, \n    DATE_FORMAT(log_table.date_log, '%d/%m/%Y') AS date_log, \n    log_table.normal_pot,\n    log_table.unnormal_pot \nFROM log_table \nWHERE 1 \nORDER BY log_table.log_id DESC \nLIMIT 1;`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "0c98f60eee4ef10c"
            ]
        ]
    },
    {
        "id": "83bb20baf9f8f01e",
        "type": "inject",
        "z": "b2b5f587f9451099",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 540,
        "wires": [
            [
                "ab6e5d28b78d8b40"
            ]
        ]
    },
    {
        "id": "0c98f60eee4ef10c",
        "type": "mysql",
        "z": "b2b5f587f9451099",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 590,
        "y": 480,
        "wires": [
            [
                "f88eedbb27b01c7e"
            ]
        ]
    },
    {
        "id": "f88eedbb27b01c7e",
        "type": "function",
        "z": "b2b5f587f9451099",
        "name": "function 12",
        "func": "var mss = msg.payload[4][0];\n// msg.payload = mss\nvar tt = `รายงานผลประจำวัน ${mss.date_log} \nก้อนเห็ดที่ปรกติ  มีจำนวน ${mss.normal_pot} ก้อน \nก้อนเห็ดไม่ปรกติ มีจำนวน ${mss.unnormal_pot} ก้อน`\nmsg.payload ={\n    message : tt\n}\nmsg.topic = \"\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 480,
        "wires": [
            [
                "ada647fb7017c19d"
            ]
        ]
    },
    {
        "id": "ada647fb7017c19d",
        "type": "http request",
        "z": "b2b5f587f9451099",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "farm_line_bot:3000/report",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 990,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "3b2ae92d4afef3cf",
        "type": "http in",
        "z": "7c1d9a9267855d45",
        "name": "",
        "url": "/get_pot_from_device/:deviceid",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 140,
        "wires": [
            [
                "113e81fbf7512b44"
            ]
        ]
    },
    {
        "id": "113e81fbf7512b44",
        "type": "function",
        "z": "7c1d9a9267855d45",
        "name": "function 8",
        "func": "var dv = msg.req.params.deviceid\n\nvar sql = `SELECT \n    cultivationpot.cultivation_pot_id AS pot_id, \n    cultivationpot.device_id, \n    cultivationpot.img_path, \n    cultivationpot.status, \n    cultivationpot.age, \n    cultivationpot.farm_id, \n    cultivationpot.pot_name, \n    cultivationpot.index, \n    typepot.type_pot_name, \n    typepot.type_pot_id \nFROM cultivationpot \nJOIN typepot ON cultivationpot.type_pot_id = typepot.type_pot_id \nWHERE cultivationpot.device_id = ${dv}\n\nUNION ALL\n\nSELECT \n    growingpot.growing_pot_id AS pot_id, \n    growingpot.device_id, \n    growingpot.img_path, \n    growingpot.status, \n    growingpot.age, \n    growingpot.farm_id, \n    growingpot.pot_name, \n    growingpot.index, \n    typepot.type_pot_name, \n    typepot.type_pot_id \nFROM growingpot \nJOIN typepot ON growingpot.type_pot_id = typepot.type_pot_id \nWHERE growingpot.device_id = ${dv}`;\nmsg.topic = sql;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 140,
        "wires": [
            [
                "f6ba873063b4bee9"
            ]
        ]
    },
    {
        "id": "f6ba873063b4bee9",
        "type": "mysql",
        "z": "7c1d9a9267855d45",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 710,
        "y": 140,
        "wires": [
            [
                "a5a2019cdbdd421f"
            ]
        ]
    },
    {
        "id": "95c4f7c622a8f55f",
        "type": "http in",
        "z": "7c1d9a9267855d45",
        "name": "",
        "url": "/add_pot",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "bb4377987aa8f8af"
            ]
        ]
    },
    {
        "id": "bb4377987aa8f8af",
        "type": "function",
        "z": "7c1d9a9267855d45",
        "name": "function 9",
        "func": "\n\n\nmsg.topic = `CALL manage_pots(${msg.payload.device} , \"${msg.payload.pot_name}\" , \"${msg.payload.status}\" , ${msg.payload.typepot})`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 220,
        "wires": [
            [
                "1f347701859c4201"
            ]
        ]
    },
    {
        "id": "1f347701859c4201",
        "type": "mysql",
        "z": "7c1d9a9267855d45",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 710,
        "y": 220,
        "wires": [
            [
                "7e942c3fa3a3356d"
            ]
        ]
    },
    {
        "id": "7e942c3fa3a3356d",
        "type": "http response",
        "z": "7c1d9a9267855d45",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 220,
        "wires": []
    },
    {
        "id": "a5a2019cdbdd421f",
        "type": "http response",
        "z": "7c1d9a9267855d45",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 140,
        "wires": []
    },
    {
        "id": "d7ecbabad78b88cc",
        "type": "http in",
        "z": "7c1d9a9267855d45",
        "name": "",
        "url": "/del_pot/:deviceid/:potid",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 300,
        "wires": [
            [
                "fe835c1a7d7b84b4"
            ]
        ]
    },
    {
        "id": "79e7e5848ff39be4",
        "type": "http response",
        "z": "7c1d9a9267855d45",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 300,
        "wires": []
    },
    {
        "id": "fe835c1a7d7b84b4",
        "type": "function",
        "z": "7c1d9a9267855d45",
        "name": "function 10",
        "func": "var dv = msg.req.params.deviceid\nvar pot = msg.req.params.potid\n\nvar sql = `CALL delete_pot(${dv} , ${pot})`;\nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 300,
        "wires": [
            [
                "67c915fdf190a0ae"
            ]
        ]
    },
    {
        "id": "67c915fdf190a0ae",
        "type": "mysql",
        "z": "7c1d9a9267855d45",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 710,
        "y": 300,
        "wires": [
            [
                "79e7e5848ff39be4"
            ]
        ]
    },
    {
        "id": "d2fd9575d293b7f1",
        "type": "http in",
        "z": "7c1d9a9267855d45",
        "name": "",
        "url": "/edit_pot/:potid",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 380,
        "wires": [
            [
                "596c5d7e8cae534c"
            ]
        ]
    },
    {
        "id": "22b6fddb82280914",
        "type": "http in",
        "z": "7c1d9a9267855d45",
        "name": "",
        "url": "/get_logs",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 460,
        "wires": [
            [
                "04cebd9bcf3044a3"
            ]
        ]
    },
    {
        "id": "26b1ca77b7e6dd21",
        "type": "mysql",
        "z": "7c1d9a9267855d45",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 710,
        "y": 460,
        "wires": [
            [
                "7879d9d3421c76c6"
            ]
        ]
    },
    {
        "id": "04cebd9bcf3044a3",
        "type": "change",
        "z": "7c1d9a9267855d45",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT `log_id` , DATE_FORMAT(date_log,'%d/%m/%Y') AS date,normal_pot,unnormal_pot FROM `log_table` WHERE 1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 460,
        "wires": [
            [
                "26b1ca77b7e6dd21"
            ]
        ]
    },
    {
        "id": "7879d9d3421c76c6",
        "type": "http response",
        "z": "7c1d9a9267855d45",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1110,
        "y": 460,
        "wires": []
    },
    {
        "id": "fddea21a67049238",
        "type": "http response",
        "z": "7c1d9a9267855d45",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1120,
        "y": 380,
        "wires": []
    },
    {
        "id": "596c5d7e8cae534c",
        "type": "function",
        "z": "7c1d9a9267855d45",
        "name": "function 13",
        "func": "var pot_id = msg.payload.pot_id\nvar type_pot_id = msg.payload.typepot\nvar status = msg.payload.status\nvar pot_name = msg.payload.pot_name\nvar device_id = msg.payload.device_id\n\n\nvar sql = `CALL edit_pot(${device_id} , ${pot_id} , \"${pot_name}\" , \"${status}\" , ${type_pot_id})`; \nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 380,
        "wires": [
            [
                "4010e73dcb319b0d"
            ]
        ]
    },
    {
        "id": "4010e73dcb319b0d",
        "type": "mysql",
        "z": "7c1d9a9267855d45",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 710,
        "y": 380,
        "wires": [
            [
                "88317932535c15a1"
            ]
        ]
    },
    {
        "id": "88317932535c15a1",
        "type": "change",
        "z": "7c1d9a9267855d45",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "OK",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 380,
        "wires": [
            [
                "fddea21a67049238"
            ]
        ]
    },
    {
        "id": "3ed784fb84e3e644",
        "type": "http in",
        "z": "7c1d9a9267855d45",
        "name": "",
        "url": "/get_active_device",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 540,
        "wires": [
            [
                "a5b6122e6a05c1f7"
            ]
        ]
    },
    {
        "id": "59ff3c61e8eb65f3",
        "type": "mysql",
        "z": "7c1d9a9267855d45",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 710,
        "y": 540,
        "wires": [
            [
                "28a6a89d7def1f22"
            ]
        ]
    },
    {
        "id": "a5b6122e6a05c1f7",
        "type": "change",
        "z": "7c1d9a9267855d45",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT      SUM(CASE WHEN device.status = 'active' THEN 1 ELSE 0 END) AS active_count,     SUM(CASE WHEN device.status = 'inactive' THEN 1 ELSE 0 END) AS inactive_count FROM device;",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 540,
        "wires": [
            [
                "59ff3c61e8eb65f3"
            ]
        ]
    },
    {
        "id": "28a6a89d7def1f22",
        "type": "http response",
        "z": "7c1d9a9267855d45",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 540,
        "wires": []
    },
    {
        "id": "50fe8581a52b0ee8",
        "type": "http in",
        "z": "7c1d9a9267855d45",
        "name": "",
        "url": "/harvest/:pot_id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 620,
        "wires": [
            [
                "4343d0056041384e"
            ]
        ]
    },
    {
        "id": "4343d0056041384e",
        "type": "function",
        "z": "7c1d9a9267855d45",
        "name": "function 14",
        "func": "var pot_id = msg.req.params.pot_id\nvar sql = `UPDATE growingpot SET age = 1 WHERE growing_pot_id = ${pot_id}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 620,
        "wires": [
            [
                "dbde9021008c23c3"
            ]
        ]
    },
    {
        "id": "dbde9021008c23c3",
        "type": "mysql",
        "z": "7c1d9a9267855d45",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 710,
        "y": 620,
        "wires": [
            [
                "e0b12a12f05fb84f"
            ]
        ]
    },
    {
        "id": "e0b12a12f05fb84f",
        "type": "http response",
        "z": "7c1d9a9267855d45",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 620,
        "wires": []
    },
    {
        "id": "f35e50e9e30801fd",
        "type": "http in",
        "z": "7c1d9a9267855d45",
        "name": "",
        "url": "/get_log",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 700,
        "wires": [
            [
                "476de61711c0c1b1"
            ]
        ]
    },
    {
        "id": "2872e58d3b693696",
        "type": "mysql",
        "z": "7c1d9a9267855d45",
        "mydb": "16e04ea512447595",
        "name": "",
        "x": 710,
        "y": 700,
        "wires": [
            [
                "5eeb6489830543ea"
            ]
        ]
    },
    {
        "id": "476de61711c0c1b1",
        "type": "change",
        "z": "7c1d9a9267855d45",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT `log_id` , DATE_FORMAT(date_log,'%d/%m/%Y') AS date,normal_pot,unnormal_pot FROM `log_table` WHERE 1 ORDER BY log_id DESC LIMIT 1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 700,
        "wires": [
            [
                "2872e58d3b693696"
            ]
        ]
    },
    {
        "id": "5eeb6489830543ea",
        "type": "http response",
        "z": "7c1d9a9267855d45",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1110,
        "y": 700,
        "wires": []
    }
]