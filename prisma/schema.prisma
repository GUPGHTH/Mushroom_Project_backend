generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id  Int    @id @default(autoincrement())
  username String @unique
  password String
  uuid     String @unique
  
}

model Farm {
  farm_id          Int           @id @default(autoincrement())
  farm_name        String
  farm_type        String?
  farm_description String?
  farm_status      Boolean?      @default(true) // Set a default value
  temperature      Float?
  humidity         Float?
  Cultivations     Cultivation[]
  Growings         Growing[]

  @@map("farm") // Ensure this matches the table name in your DB
}

model Device {
  device_id    Int           @id @default(autoincrement())
  device_name  String
  description  String?
  device_type  String?
  status       String?       @default("inactive") // Default status if needed
  Cultivations Cultivation[]
  Growings     Growing[]

  @@map("device")
}

model TypePot {
  type_pot_id     Int              @id @default(autoincrement())
  type_pot_name   String
  description     String?
  status          Boolean?         @default(true) // Default active status
  CultivationPots CultivationPot[]
  GrowingPots     GrowingPot[]
  @@map("typepot")
}

model Cultivation {
  cultivation_id  Int              @id @default(autoincrement())
  farm_id         Int
  device_id       Int
  farm            Farm             @relation(fields: [farm_id], references: [farm_id], onDelete: Cascade)
  device          Device           @relation(fields: [device_id], references: [device_id], onDelete: Cascade)
  CultivationPots CultivationPot[]

  @@map("cultivation")
}

model CultivationPot {
  cultivation_pot_id Int         @id @default(autoincrement())
  cultivation_id     Int
  pot_name           String?
  type_pot_id        Int
  index              Int?
  img_path           String?
  ai_result          String?
  status             String?     @default("active") // Default value added
  cultivation        Cultivation @relation(fields: [cultivation_id], references: [cultivation_id], onDelete: Cascade)
  typePot            TypePot     @relation(fields: [type_pot_id], references: [type_pot_id], onDelete: Cascade)

  @@map("cultivationpot")
}

model Growing {
  growing_id  Int          @id @default(autoincrement())
  farm_id     Int
  device_id   Int
  farm        Farm         @relation(fields: [farm_id], references: [farm_id], onDelete: Cascade)
  device      Device       @relation(fields: [device_id], references: [device_id], onDelete: Cascade)
  GrowingPots GrowingPot[]
  @@map("growing")
}

model GrowingPot {
  growing_pot_id Int     @id @default(autoincrement())
  growing_id     Int
  pot_name       String?
  type_pot_id    Int
  index          Int?
  img_path       String?
  ai_result      String?
  status         String? @default("active") // Default value added
  growing        Growing @relation(fields: [growing_id], references: [growing_id], onDelete: Cascade)
  typePot        TypePot @relation(fields: [type_pot_id], references: [type_pot_id], onDelete: Cascade)

  @@map("growingpot")
}